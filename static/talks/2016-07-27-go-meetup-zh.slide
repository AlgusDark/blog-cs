Zurich Gophers Meetup
Discussions about Go 1.7
27 Jul 2016

Cyrill Schumacher
Unic AG
cyrill@schumacher.fm
https://github.com/SchumacherFM
@SchumacherFM

* Agenda

- Welcome
- News/Conferences
- Go 1.7
- Two more things

* Welcome

Thank you for coming! 

Glad to have you here for the 2nd Go Meetup at the new Unic office

Snacks and Drinks sponsored by Unic

.link http://www.unic.com/jobs

* News

- Intellij IDE Go Plugin got a big update
- New vim-go tutorial
- Caddy Server 0.9 Released with All New Core 
- Hugo Static Site Generator v0.16
- goimports has been updated, faster and less CPU.
- Transaction Oriented Collector (TOC) - Go's next GC

.link http://go-ide.com/releases/0.11.1725/ 
.link https://github.com/fatih/vim-go-tutorial
.link https://caddyserver.com/blog/caddy-0_9-released
.link https://github.com/spf13/hugo/releases/tag/v0.16
.link http://golang.org/s/gctoc

* Conferences

- GopherCon in Denver, CO; July 11.-13., 2016
- The Golang UK Conference; August 17th, 18th & 19th 2016; London; Tickets for ~£300
- The European Go conference; October 10, 2016 · Paris; Tickets for ~139€
- GothamGo Conference; November 18, 2016 - New York City
- FOSDEM Brussels / 4 & 5 February 2017 - Free!

.link https://github.com/gophercon/2016-talks

* Go 1.7 Some Core Features

- Support for OSX 10.12 Sierra, linux/s390, plan9/arm, linux/mips64, ppc ...
- New code generation back end for 64-bit x86 systems; based on SSA, generates more compact, more efficient code and provides a better platform for optimizations such as bounds check elimination. The new back end reduces the CPU time required by our benchmark programs by 5-35%.  
- The compiler and linker have been optimized and run significantly faster in this release than in Go 1.6,
- Smaller binaries than built with Go 1.6, sometimes by as much as 20-30%
- This release removes support for the GO15VENDOREXPERIMENT environment variable. Do you use a vendoring tool? Which?
- Use BinaryOnly packages (without complete source code) in your program

more in the release notes

* Go 1.7 Some Package Features

- net/http/httptrace, a package that provides mechanisms for tracing events within HTTP requests. 

Next slides more about:

- Moves the golang.org/x/net/context package into the standard library as context. 
- The testing package now supports the definition of tests with subtests and benchmarks with sub-benchmarks.

* context

	Context interface {
		Deadline() (deadline time.Time, ok bool)
		Done() <-chan struct{}
		Err() error
		Value(key interface{}) interface{}
	}

From https://blog.golang.org/context:
- In http/rpc requests there is a need for request specific values such as auth tokens, end user IDs, deadline, request | tracing IDs or scoped values.
- Every blocking or IO function call should be cancelable or timeoutable.

Context should always be the first parameter of a function call or optional config on a request structure

	func (d *Dialer) DialContext(ctx context.Context, network, address string) (Conn, error)

* context.WithValue()

	func WithValue(parent Context, key, val interface{}) Context

- So easy to abuse
- obscures your program’s flow, if used incorrectly
- Context.Value() should inform not control

* How to make it impossible to abuse and type safe?

Example from an HTTP middleware for JSON web token authentication:

	package jwt
	
	type keyCtxToken struct{}
	func withContext(ctx context.Context, t csjwt.Token) context.Context {
		return context.WithValue(ctx, keyCtxToken{}, t)
	}
	func FromContext(ctx context.Context) (csjwt.Token, bool) {
		t, ok := ctx.Value(keyCtxToken{}).(csjwt.Token)
		return t, ok
	}

Use `jwt.FromContext()` to extract the token in a type safe way in the next middleware or final HTTP handler.


* context.Value() abuse

Any kind of connections are the worst case examples of objects to place in a context.Value because it obviously controls the program and is required input for your functions. Example from: http://peter.bourgon.org/blog/2016/07/11/context.html

	// Don't do this.
	func MyMiddleware(next http.Handler) http.Handler {
		return http.HandlerFunc(func (w http.ResponseWriter, r *http.Request) {
			db := r.Context().Value(DatabaseContextKey).(Database)
			// Use db somehow
			next.ServeHTTP(w, r)
		})
	}
	// Do this instead.
	func MyMiddleware(db Database, next http.Handler) http.Handler {
		return http.HandlerFunc(func (w http.ResponseWriter, r *http.Request) {
			// Use db here.
			next.ServeHTTP(w, r)
		})
	}


Tip: Use context to store values, like strings and data structs; avoid using it to store references, like pointers or handles.

* context with cancellation

	func (c *Client) Ping(ctx context.Context) error {
	 // ...
	}

With specific timeout:
	
	ctx := context.Background()
	ctx, cancel = context.WithTimeout(ctx, 3*time.Second)
	defer cancel()
	client.Ping(ctx)

With dynamic timeout:
	
	ctx := context.Background()
	ctx, cancel = context.WithCancel(ctx)
	defer func() {
	  <- eventHappens
	  cancel()
	}()
	client.Ping(ctx)

* testing with sub-tests & sub-benchmarks

The Run methods of T and B allow defining subtests and sub-benchmarks, without having to define separate functions for each. This enables uses like table-driven benchmarks and creating hierarchical tests. It also provides a way to share common setup and tear-down code:

	func TestFoo(t *testing.T) {
	    // <setup code>
	    t.Run("A=1", func(t *testing.T) { ... })
	    t.Run("A=2", func(t *testing.T) { ... })
	    t.Run("B=1", func(t *testing.T) { ... })
	    // <tear-down code>
	}

Run them like:

	go test -run Foo     # Run top-level tests matching "Foo".
	go test -run Foo/A=  # Run subtests of Foo matching "A=".
	go test -run /A=1    # Run all subtests of a top-level test matching "A=1".

* Two more things

Our next meetup will be on the 20th of October at a new location with a Gopher from the US.

.image ardanlabs.png

.link https://github.com/golang/go/issues/16339 Vote No -> Proposal: Alias declarations for Go #16339 